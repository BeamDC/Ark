pub struct ArchiveHeader(
    pub usize,
    pub usize,
    pub bool
);

pub struct FileHeader(
    pub String,
    pub u8,
    pub u64,
    pub u64
);

/// Headers which can be found in the archives generated by Ark
pub enum Header {
    /// the archive header which contains information
    /// about the archive and the files it is made up of
    Archive {
        total_files: usize,
        /// the current archive version, starts at 1 on creation,
        /// increases by 1 on each update
        version: usize,
        /// if the archive is encrypted or not
        encrypted: bool,
    },
    /// the file header which contains information about a specific file
    File {
        name: String,
        /// the compression method used for this file
        method: u8,
        compressed_size: u64,
        decompressed_size: u64,
    }
}

impl Header {
    pub const ARCHIVE_HEADER_SIZE: usize = 3;
    pub const FILE_HEADER_SIZE: usize = 4;

    // pub const HEADER_LEN: u32 =
    pub fn to_bytes(&self) -> Vec<u8> {
        match self {
            Header::Archive { total_files, version, encrypted } => {
                format!(
                    "files:{}\nver:{}\nencrypted:{}",
                    total_files, version, encrypted
                )
            },
            Header::File
            { name, method, compressed_size, decompressed_size } => {
                format!(
                    "\nname:{}\nmethod:{}\ncompressed:{}\ndecompressed:{}\n",
                    name, method, compressed_size, decompressed_size
                )
            }
        }.into_bytes()
    }
}